call plug#begin('~/.config/nvim/bundle')
" Completion and syntax
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'neoclide/coc-rls'
"Plug 'dense-analysis/ale'
"Plug 'Chiel92/vim-autoformat'
"Plug 'tpope/vim-markdown'
Plug 'rust-lang/rust.vim'
Plug 'racer-rust/vim-racer'
Plug 'cespare/vim-toml'
Plug 'lervag/vimtex'
"Plug 'KeitaNakamura/tex-conceal.vim', {'for': 'tex'}
Plug 'leafgarland/typescript-vim'
Plug 'peitalin/vim-jsx-typescript'
Plug 'tikhomirov/vim-glsl'
Plug 'nvim-treesitter/nvim-treesitter'
Plug 'vim-scripts/mips.vim'
Plug 'pest-parser/pest.vim'
Plug 'petrushka/vim-sage'

" Style and display
Plug 'arcticicestudio/nord-vim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'altercation/vim-colors-solarized'
Plug 'flazz/vim-colorschemes'
Plug 'dylanaraps/wal.vim'

" Other functionality
Plug 'kien/ctrlp.vim'
"Plug 'xolox/vim-misc'
"Plug 'terryma/vim-multiple-cursors'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'godlygeek/tabular'
"Plug 'majutsushi/tagbar'
"Plug 'vim-scripts/DrawIt'
"Plug 'vim-scripts/LanguageTool'
"Plug 'vim-scripts/matchit.zip'
"Plug 'vim-scripts/loremipsum'
"Plug 'shime/vim-livedown'
"Plug 'ervandew/eclim'
"Plug 'ms-jpq/chadtree', {'branch': 'chad', 'do': ':UpdateRemotePlugins'}
Plug 'scrooloose/nerdtree'
Plug 'scrooloose/nerdcommenter'
Plug 'rakr/vim-one'
"Plug 'valloric/youcompleteme'
"Plug 'octol/vim-cpp-enhanced-highlight'
"Plug 'scrooloose/syntastic'
"Plug 'sirver/ultisnips'
"Plug 'gisraptor/vim-lilypond-integrator', {'for': 'ly'}
Plug 'junegunn/goyo.vim'
Plug 'junegunn/limelight.vim'
"Plug 'junegunn/vim-emoji'
"Plug 'ianding1/leetcode.vim'
"Plug 'sjl/vitality.vim'
"Plug 'benmills/vimux'
"Plug 'rizzatti/dash.vim'
"if $ITERM_PROFILE != "Asciinema"
"Plug 'ryanoasis/vim-devicons'
"end
call plug#end()

" NOTE:
" (or notes)
"
" # Refactor text in files
" 1. populate the arg list
"   `:args `find . -type f`
" 2. do replacement on the args
"   `:argdo %s/<pattern>/<replace>/g`

" CtrlP
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_custom_ignore = {
  \ 'dir':  'target',
  \ }

" Airline
let g:airline_powerline_fonts=1
"let g:airline_theme='wal'

" COC
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" LanguageTool
"let g:languagetool_jar='/usr/local/Cellar/languagetool/4.0/libexec/languagetool-commandline.jar'

" Vimtex
let g:tex_flavor='latex'
let g:vimtex_view_method='skim'
let g:vimtex_quickfix_mode=0
let g:tex_conceal='abdmg'
let g:vimtex_indent_enabled=0

" Snippets
"let g:UltiSnipsSnippetDirectories=[$HOME . "/.vim/snips"]
"let g:UltiSnipsExpandTrigger = '<c-]>'
"let g:UltiSnipsJumpForwardTrigger = '<c-]>'
"let g:UltiSnipsJumpBackwardTrigger = '<c-[>'

" Leetcode
"let g:leetcode_username = 'nilsso'
"let g:leetcode_solution_filetype = 'rust'

" Goyo/limelight
let g:goyo_width=110
let g:limelight_conceal_ctermfg = 'gray'
function! s:goyo_enter()
set noshowmode
set noshowcmd
set scrolloff=999
"set number
Limelight
endfunction
function! s:goyo_leave()
set showmode
set showcmd
set scrolloff=5
Limelight!
endfunction
autocmd! User GoyoEnter nested call <SID>goyo_enter()
autocmd! User GoyoLeave nested call <SID>goyo_leave()

" Syntastic
"set laststatus=2
"let g:syntastic_mode_map={'mode': 'passive'}
"let g:syntastic_mode_map={'mode': 'passive', 'active_filetypes': [],'passive_filetypes': []}
"let g:syntastic_quiet_messages = { 'regex': [
            "\ '#pragma once',
            "\ 'Do not use @ in LaTeX macro names',
            "\ 'Command terminated with space' ,
            "\ 'Vertical rules in tables are ugly',
            "\ ] }
""nnoremap <C-w>E :SyntasticCheck<CR> :SyntasticToggleMode<CR>
"" Python(3)
"let g:syntastic_python_python_exec = '/usr/bin/python3'
"" C++
"let g:syntastic_always_populate_loc_list=1
"let g:syntastic_cpp_compiler='g++'
"let g:syntastic_cpp_compiler_options='-std=c++20 -Wall -Wextra'
"let g:syntastic_cpp_check_header=1
"" Rust
"let g:syntastic_rust_checkers=['rustc']
"let g:syntastic_rust_rustc_exe = 'cargo check'
"let g:syntastic_rust_rustc_fname = ''
"let g:syntastic_rust_rustc_args = '--'
""map <leader>e :SyntasticCheck<cr>
"" Javascript
"let g:syntastic_javascript_checkers=['jshint']
"" Java
"let g:loaded_syntastic_java_javac_checker=1

" File tree
nnoremap <leader>n :NERDTreeToggle<cr>
"nnoremap <leader>n <cmd>CHADopen<cr>
"let g:chadtree_settings = {
            "\ 'follow': 'false',
            "\ }

" NERDCommenter
map <C-i> <PLUG>NERDCommenterInvert k<cr>

" Tabularize
map <leader>o :Tabularize<cr>

" Tagbar
"map <leader>t :TagbarToggle<cr>
"let g:tagbar_type_markdown = {
            "\ 'ctagstype': 'markdown',
            "\ 'ctagsbin' : '~/.vim/bundle/markdown2ctags/markdown2ctags.py',
            "\ 'ctagsargs' : '-f - --sort=yes',
            "\ 'kinds' : [
            "\ 's:sections',
            "\ 'i:images'
            "\ ],
            "\ 'sro' : '|',
            "\ 'kind2scope' : {
            "\ 's' : 'section',
            "\ },
            "\ 'sort': 0,
            "\ }

" Vimux
"function! VimuxSlime()
"call VimuxSendText(@v)
"call VimuxSendKeys("Enter")
"endfunction

" YCM
let g:ycm_rust_src_path = $RUST_SRC_PATH

"nmap <C-c><C-c> "vyip :VimuxRunCommand(@v)<cr>
""nmap <C-c><leader> %yv :VimuxRunCommand(@v)<cr>
"vmap <C-c> "vy :call VimuxSlime()<cr>

" Dash
"nmap <silent> <leader>d <Plug>DashSearch
